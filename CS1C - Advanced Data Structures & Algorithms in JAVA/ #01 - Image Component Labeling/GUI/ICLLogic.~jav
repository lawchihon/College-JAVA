import java.awt.*;
import java.awt.Component;
import java.applet.*;

public class ICLLogic extends Applet
{
  private  int dimension = 2 ;
  /*This is the 2D array where the numbers are going to be saved. You will use
  this array in both labelBreadth and labelDepth*/
  private  int [][] pixels ;

  private final static int PIXELDIM = 18;

  private final static int  CURRENTPIXEL = 1 ;
  private final static int  CHECKPIXEL = 2   ;
  private final static int  ADDDATASTRUCTURE = 3;

  boolean depthFirst ;   //Is it depth first or breadth first?


  private int delay = 250 ;

  private int state = 0 ;
  //This is the queue to be used in labelBreadth
  ArrayQueue q = new ArrayQueue(20);
  //This is the stack to be used in labelDepth
  ArrayStack s = new ArrayStack(255);


  public ICLLogic (boolean depthFirst)
  {
    this.depthFirst = depthFirst ;
  }
  
  private void setDimension ( int dimension )
  {
    this.dimension = dimension ;
  }

  /*This method is responsible of drawing the squares*/
  public void generateImage ( int dimension)
  {
    this.setDimension(dimension);
    pixels = new int [dimension + 2][dimension + 2];
    for ( int i = 0 ; i < dimension + 1 ; i ++ )
    {
      pixels[0][i] = pixels[dimension + 1][i] = 0 ;  // bottom and top
      pixels[i][0] = pixels[i][dimension + 1] - 0 ;  // left and right

    }

    for ( int i = 1 ; i <= dimension ;  i++ )
    {
      for ( int j = 1 ; j <= dimension ; j++ )
      {
        pixels[i][j] = (int) (Math.random() *2) ;
      }
    }
  }



  public void draw (Graphics g )
  {
    if ( pixels != null )
    {
      for ( int i = 1 ; i <= dimension ;  i++ )
      {
        for ( int j = 1 ; j <= dimension ; j++ )
        {

          drawPixel (g, i , j  , pixels[i][j]);

        }
      }
    }

  }

  /*This method is responsible for coloring the square and labelling each one
  with a number. You will need this method also in labelDepth and labelbreadth
  since it also sets the color of each square.*/
  public void drawPixel (Graphics  g , int x , int y , int number)
  {
  /*The color is not fully random..Re-implement it so it becomes fully random*/
    Color current ;
      if(number<=4 && number!=0 &&number!=1)
        current=new Color(40*number,60,100);
      else if (number>4 && number<8)
        current=new Color(20*number,50+20*number,150+number);
      else if(number>=8 && number<13)
        current=new Color(5*number,100,30*(number-4));
      else if(number>13)
        current =new Color(118,10*(number-5),20*(number-10));
      else
        current=Color.gray;

      g.setColor(current);
      g.fillRect(x*PIXELDIM , y*PIXELDIM , PIXELDIM , PIXELDIM);

      current = Color.black;
      g.setColor(current);


      g.drawRect(x*PIXELDIM , y*PIXELDIM , PIXELDIM , PIXELDIM);
      String str= new String(""+number); //writes the number on the square
      g.drawString(str,  x*PIXELDIM + PIXELDIM/4 ,
       y*PIXELDIM + 2*PIXELDIM /3 );

  }

  public void labelDepth(Graphics g,int Dimension)
   {
   /*Enter here the code for the Depth First method. This method will later
   be called in class CanvasResult. The Dimension attribute it takes is the
   dimension value set by the user. You do not need to worry about how this
   value will be set.*/
   }




    public void labelBreadth(Graphics g,int Dimension)
  {
  /*Enter here the code for the breadth first method. This method will later
   be called in class CanvasResult. The Dimension attribute it takes is the
   dimension value set by the user. You do not need to worry about how this
   value will be set.*/
  }


}